{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentItem","username","items","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","name","value","preventDefault","itemsRef","database","ref","item","title","user","push","_this2","on","snapshot","val","newState","id","itemID","concat","remove","_this3","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","map","key","onClick","removeItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a35048a1.chunk.js","sourcesContent":["import firebase from 'firebase'\n  const config = {\n    apiKey: \"AIzaSyAVuMobFaaCFHKqXnu56ZeZjY3ebz0cI3o\",\n    authDomain: \"fun-foods-friends-ebf72.firebaseapp.com\",\n    databaseURL: \"https://fun-foods-friends-ebf72.firebaseio.com\",\n    projectId: \"fun-foods-friends-ebf72\",\n    storageBucket: \"fun-foods-friends-ebf72.appspot.com\",\n    messagingSenderId: \"955295202565\"\n  };\n  firebase.initializeApp(config);\n  \nexport default firebase;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase.js\";\n//const url mongo\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentItem: \"\",\n      username: \"\",\n      items: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const itemsRef = firebase.database().ref(\"items\");//firebase.database() is .ref notation to the js file. use mongo url ref instead\n    const item = {\n      title: this.state.currentItem,\n      user: this.state.username\n    };\n    itemsRef.push(item);\n    this.setState({\n      currentItem: \"\",\n      username: \"\"\n    });\n  }\n  componentDidMount() {\n    const itemsRef = firebase.database().ref(\"items\");\n    itemsRef.on(\"value\", snapshot => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          user: items[item].user\n        });\n      }\n      this.setState({\n        items: newState\n      });\n    });\n  }\n  removeItem(itemID) {\n    const itemRef = firebase.database().ref(`/items/${itemID}`);\n    itemRef.remove();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <h1>Inventory</h1>\n          </div>\n        </header>\n        <div className=\"container\">\n          <section className=\"add-item\">\n            <form onSubmit={this.handleSubmit}>\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"What's your name?\"\n                onChange={this.handleChange}\n                value={this.state.username}\n              />\n              <input\n                type=\"text\"\n                name=\"currentItem\"\n                placeholder=\"What are you bringing?\"\n                onChange={this.handleChange}\n                value={this.state.currentItem}\n              />\n              <button>Add Item</button>\n            </form>\n          </section>\n          <section className=\"display-item\">\n            <div className=\"wrapper\">\n              <ul>\n                {this.state.items.map(item => {\n                  return (\n                    <li key={item.id}>\n                      <h3>{item.title}</h3>\n                      <p>\n                        brought by: {item.user}\n                        <button onClick={() => this.removeItem(item.id)}>\n                          Remove Item\n                        </button>\n                      </p>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}